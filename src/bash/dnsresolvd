#!/usr/bin/env bash
# src/bash/dnsresolvd
# =============================================================================
# DNS Resolver Daemon (dnsresolvd). Version 0.1
# =============================================================================
# A daemon that performs DNS lookups for the given hostname
# passed in an HTTP request, with the focus on its implementation
# using various programming languages. (Netcat-boosted impl.)
# =============================================================================
# Copyright (C) 2017-2019 Radislav (Radicchio) Golubtsov
#
# (See the LICENSE file at the top of the source tree.)
#

# --- Debug output - Begin ----------------------------------------------------
declare -r _UNAME=`uname`

# If we're on OpenBSD, or on Linux, ...
  if [ ${_UNAME} == "OpenBSD" ]; then
    echo "==> ${_UNAME}: Using OpenBSD Netcat."
elif [ ${_UNAME} == "Linux"   ]; then
    echo "==> ${_UNAME}: Using Linux Netcat."
else
    echo "==> ${_UNAME}: Unix-?-"
fi
# --- Debug output - End ------------------------------------------------------

# Sourcing the helper script of the daemon.
. `dirname ${BASH_SOURCE}`/dnsresolvh

ret=${_EXIT_SUCCESS}

argc=$#

daemon_name=$0
port_number=$1

print_banner_opt=${_EMPTY_STRING}

if [ ${argc} -gt 1 ]; then
    print_banner_opt=${2^^}
fi

if [ "${print_banner_opt}" == "${_PRINT_BANNER_OPT}" ]; then
    _separator_draw "${_DMN_DESCRIPTION}"

    echo "${_DMN_NAME}${_COMMA} ${_DMN_VERSION_S__} ${_DMN_VERSION}
${_DMN_DESCRIPTION}
${_DMN_COPYRIGHT__} ${_DMN_AUTHOR}"

    _separator_draw "${_DMN_DESCRIPTION}"
fi

# Checking for args presence.
if [ ${argc} -eq 0 ]; then
    ret=${_EXIT_FAILURE}

    >&2 echo -e "${daemon_name}${_ERR_MUST_BE_ONE_TWO_ARGS_1}"`
                      `"${argc}${_ERR_MUST_BE_ONE_TWO_ARGS_2}"`
                             `"${_NEW_LINE}"

    >&2 echo -e "${_MSG_USAGE_TEMPLATE_1}${daemon_name}"`
               `"${_MSG_USAGE_TEMPLATE_2}${_NEW_LINE}"

    exit ${ret}
fi

# Validating the port number and discarding any rubbish it may contain.
printf -v port_number "%d" ${port_number} 2>/dev/null
if [ $? -ne 0 ]; then port_number=0; fi

echo "==> ${port_number}"

# Checking for port correctness.
if [ ${port_number} -lt ${_MIN_PORT} -o ${port_number} -gt ${_MAX_PORT} ]; then
    ret=${_EXIT_FAILURE}

    >&2 echo -e "${daemon_name}${_ERR_PORT_MUST_BE_POSITIVE_INT}"`
                             `"${_NEW_LINE}"

    >&2 echo -e "${_MSG_USAGE_TEMPLATE_1}${daemon_name}"`
               `"${_MSG_USAGE_TEMPLATE_2}${_NEW_LINE}"

    exit ${ret}
fi

# If there is an error -- telling the OS about this.
if [ $? -eq ${_EXIT_FAILURE} ]; then
    exit    ${_EXIT_FAILURE}
fi

exit        ${_EXIT_SUCCESS}

# vim:set nu et ts=4 sw=4:
