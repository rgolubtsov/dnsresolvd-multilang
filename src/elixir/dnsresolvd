#!/usr/bin/env elixir
# src/elixir/dnsresolvd
# =============================================================================
# DNS Resolver Daemon (dnsresolvd). Version 0.1
# =============================================================================
# A daemon that performs DNS lookups for the given hostname
# passed in an HTTP request, with the focus on its implementation
# using various programming languages. (Cowboy-boosted impl.)
# =============================================================================
# Copyright (C) 2017-2019 Radislav (Radicchio) Golubtsov
#
# (See the LICENSE file at the top of the source tree.)
#

defmodule Main do
    @moduledoc "The entry point container of the daemon."

    @doc """
    The daemon entry point.

    **Args:**<br />
        `argc`: The number of command-line arguments.
        `argv`: The list   of command-line arguments.

    **Returns:**<br />
        The exit code indicating the daemon overall execution status.
    """
    def main(argc, argv) do
        daemon_name = Path.basename(__ENV__.file)

        port_number      = if (argc > 0),   do: Enum.at(argv, 0),
                                          else: 0
        print_banner_opt = if (argc > 1),   do: Enum.at(argv, 1),
                                          else: AUX._EMPTY_STRING

        print_banner_opt = String.upcase(print_banner_opt, :ascii)

        if (print_banner_opt === AUX._PRINT_BANNER_OPT) do
            AUX._separator_draw(AUX._DMN_DESCRIPTION)

        IO.puts(AUX._DMN_NAME <> AUX._COMMA_SPACE_SEP  <> AUX._DMN_VERSION_S__
     <> AUX._ONE_SPACE_STRING <> AUX._DMN_VERSION      <> AUX._NEW_LINE
     <> AUX._DMN_DESCRIPTION                           <> AUX._NEW_LINE
     <> AUX._DMN_COPYRIGHT__  <> AUX._ONE_SPACE_STRING <> AUX._DMN_AUTHOR)

            AUX._separator_draw(AUX._DMN_DESCRIPTION)
        end

        # Opening the system logger.----- Calling Erlang -----+---+---+---+
        :code.load_file(:syslog)        # <-------------------+   |   |   |
                        :syslog.start() # <-----------------------+   |   |
        {:ok,    log} = :syslog.open(to_charlist(daemon_name),# <-----+   |
        [:cons, :pid],  :daemon)        # <-------------------------------+

        # Checking for args presence.
        if (argc === 0) do
            ret = AUX._EXIT_FAILURE

            IO.puts(:stderr, daemon_name <> AUX._ERR_MUST_BE_ONE_TWO_ARGS_1
                      <> to_string(argc) <> AUX._ERR_MUST_BE_ONE_TWO_ARGS_2
                                         <> AUX._NEW_LINE)

            :syslog.log(log, :err, # <----- Calling Erlang -----
                             daemon_name <> AUX._ERR_MUST_BE_ONE_TWO_ARGS_1
                      <> to_string(argc) <> AUX._ERR_MUST_BE_ONE_TWO_ARGS_2
                                         <> AUX._NEW_LINE)

            IO.puts(:stderr, AUX._MSG_USAGE_TEMPLATE_1 <> daemon_name
                          <> AUX._MSG_USAGE_TEMPLATE_2 <> AUX._NEW_LINE)

            AUX._cleanups_fixate(log)

            System.halt(ret)
        end

        # Validating the port number and discarding any rubbish it may contain.
        port_number = try do
            String.to_integer(port_number)
        rescue
            ArgumentError -> 0
        end

        # Checking for port correctness.
        if ((port_number < AUX._MIN_PORT) or (port_number > AUX._MAX_PORT)) do
            ret = AUX._EXIT_FAILURE

            IO.puts(:stderr, daemon_name <> AUX._ERR_PORT_MUST_BE_POSITIVE_INT
                                         <> AUX._NEW_LINE)

            :syslog.log(log, :err, # <----- Calling Erlang -----
                             daemon_name <> AUX._ERR_PORT_MUST_BE_POSITIVE_INT
                                         <> AUX._NEW_LINE)

            IO.puts(:stderr, AUX._MSG_USAGE_TEMPLATE_1 <> daemon_name
                          <> AUX._MSG_USAGE_TEMPLATE_2 <> AUX._NEW_LINE)

            AUX._cleanups_fixate(log)

            System.halt(ret)
        end

        # Starting up the daemon.
        DnsResolvd.start(nil, {
            port_number,
            daemon_name,
            log
        })

        # Making final cleanups.
        AUX._cleanups_fixate(log)

        AUX._EXIT_SUCCESS
    end
end

argv = System.argv()
argc = length(argv)

ret = Main.main(argc, argv)

System.stop(ret)

# vim:set nu et ts=4 sw=4:
