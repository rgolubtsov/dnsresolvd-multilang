#!/usr/bin/env clojure
; src/clojure/dnsresolvd
; =============================================================================
; DNS Resolver Daemon (dnsresolvd). Version 0.1
; =============================================================================
; A daemon that performs DNS lookups for the given hostname
; passed in an HTTP request, with the focus on its implementation
; using various programming languages. (HTTP Kit-boosted impl.)
; =============================================================================
; Copyright (C) 2017-2019 Radislav (Radicchio) Golubtsov
;
; (See the LICENSE file at the top of the source tree.)
;

; --- (add-classpath-)-related constants.
(defmacro DEP-PROT [] "file:")
(defmacro DEP-PREF [] (str
    (DEP-PROT) (System/getProperty "user.home") "/.m2/repository/"))
(defmacro DEP-URL0 [] (str
;   (DEP-PREF) "org/graylog2/syslog4j/0.9.60/syslog4j-0.9.60.jar"))
    (DEP-PREF) "org/graylog2/syslog4j/0.9.61-SNAPSHOT/syslog4j-0.9.61-SNAPSHOT.jar"))
(defmacro DEP-URL1 [] (str
    (DEP-PREF) "net/java/dev/jna/jna/5.2.0/jna-5.2.0.jar"))
(defmacro DEP-URL2 [] (str
    (DEP-PREF) "http-kit/http-kit/2.3.0/http-kit-2.3.0.jar"))
(defmacro DEP-URL- [] (str
    (DEP-PROT) "lib/"))

(defn add-classpath-
    "Helper function. Adds a custom classpath entry (dir/jar)." []

    ; --- Var names stand for: ----------------+
    ; acl ==> sun.misc.Launcher$AppClassLoader |
    ; fld ==> java.lang.reflect.Field          |
    ; ucp ==> sun.misc.URLClassPath            |
    ; -----------------------------------------+

    (let [acl (ClassLoader/getSystemClassLoader)                   ];(println (seq (.getURLs acl)))
    (let [fld (aget (.getDeclaredFields java.net.URLClassLoader) 0)];(println                fld  )
              (.setAccessible fld true) ; <== Important: suppressing Java language access checking.
    (let [ucp (.get    fld acl)                                    ];(println                ucp  )
              (.addURL ucp (java.net.URL. (DEP-URL0)))              ;(println (seq (.getURLs acl)))
              (.addURL ucp (java.net.URL. (DEP-URL1)))              ;(println (seq (.getURLs acl)))
              (.addURL ucp (java.net.URL. (DEP-URL2)))              ;(println (seq (.getURLs acl)))
              (.addURL ucp (java.net.URL. (DEP-URL-)))              ;(println (seq (.getURLs acl)))
    )))
) (add-classpath-)

(ns dnsresolvd
    "The startup script of the daemon."

    (:require [dnsresolvh :as AUX] dnsresolvd)

    (:import [org.graylog2.syslog4j.impl.unix UnixSyslog      ])
    (:import [org.graylog2.syslog4j.impl.unix UnixSyslogConfig])
    (:import [org.graylog2.syslog4j               SyslogIF    ])
)

(defn main
    "The daemon entry point.

    Args:
        argv: The list of command-line arguments.

    Returns:
        The exit code indicating the daemon overall execution status.
    " [argv]

    (let [ret- (AUX/EXIT-SUCCESS)]

    (let [argc (count argv)]

    (let [daemon-name (str *ns*)]

    (let [port-number-      (if (> argc 0) (nth argv 0)
                                           0)]
    (let [print-banner-opt- (if (> argc 1) (nth argv 1)
                                           (AUX/EMPTY-STRING))]

    (let [print-banner-opt (clojure.string/upper-case print-banner-opt-)]

    (cond
        (= print-banner-opt (AUX/PRINT-BANNER-OPT)) (do

            (AUX/separator-draw (AUX/DMN-DESCRIPTION))

            (println (str
            (AUX/DMN-NAME        ) (AUX/COMMA-SPACE-SEP ) (AUX/DMN-VERSION-S--)
            (AUX/ONE-SPACE-STRING) (AUX/DMN-VERSION     ) (AUX/NEW-LINE       )
            (AUX/DMN-DESCRIPTION )                        (AUX/NEW-LINE       )
            (AUX/DMN-COPYRIGHT-- ) (AUX/ONE-SPACE-STRING) (AUX/DMN-AUTHOR     )
            ))

            (AUX/separator-draw (AUX/DMN-DESCRIPTION))
        )
    )

    ; Opening the system logger.
    ; --- Calling <syslog.h> openlog(NULL, LOG_CONS | LOG_PID, LOG_DAEMON); ---
    (let [log (UnixSyslog.      )]
    (let [cfg (UnixSyslogConfig.)]
    (.setIdent    cfg nil)
    (.setFacility cfg SyslogIF/FACILITY_DAEMON)
    (.initialize  log SyslogIF/UNIX_SYSLOG cfg))

    ; Checking for args presence.
    (cond
        (= argc 0)
            (let [ret0 (AUX/EXIT-FAILURE)]

            (binding [*out* *err*]
            (println    (str daemon-name (AUX/ERR-MUST-BE-ONE-TWO-ARGS-1)
                                    argc (AUX/ERR-MUST-BE-ONE-TWO-ARGS-2)
                                         (AUX/NEW-LINE)))

            (.error log (str daemon-name (AUX/ERR-MUST-BE-ONE-TWO-ARGS-1)
                                    argc (AUX/ERR-MUST-BE-ONE-TWO-ARGS-2)
                                         (AUX/NEW-LINE)))

            (println    (str (AUX/MSG-USAGE-TEMPLATE-1) daemon-name
                             (AUX/MSG-USAGE-TEMPLATE-2) (AUX/NEW-LINE)))
            )

            (AUX/cleanups-fixate log)

            (System/exit ret0)
            )
    )

    ; Validating the port number and discarding any rubbish it may contain.
    (let [port-number (try
        (Long. (re-find (AUX/DIGITS) port-number-))
    (catch
        Exception e 0
    ))]

    ; Checking for port correctness.
    (cond
        (or (< port-number (AUX/MIN-PORT)) (> port-number (AUX/MAX-PORT)))
            (let [ret1 (AUX/EXIT-FAILURE)]

            (binding [*out* *err*]
            (println    (str daemon-name (AUX/ERR-PORT-MUST-BE-POSITIVE-INT)
                                         (AUX/NEW-LINE)))

            (.error log (str daemon-name (AUX/ERR-PORT-MUST-BE-POSITIVE-INT)
                                         (AUX/NEW-LINE)))

            (println    (str (AUX/MSG-USAGE-TEMPLATE-1) daemon-name
                             (AUX/MSG-USAGE-TEMPLATE-2) (AUX/NEW-LINE)))
            )

            (AUX/cleanups-fixate log)

            (System/exit ret1)
            )
    )

    ; Starting up the daemon.
    (startup (list
        port-number
        daemon-name
        log
    )))

    ; Making final cleanups.
    (AUX/cleanups-fixate log)
    ))))))

    (System/exit ret-)
    )
) (main *command-line-args*)

; vim:set nu et ts=4 sw=4:
