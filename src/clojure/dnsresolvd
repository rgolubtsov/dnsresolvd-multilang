#!/usr/bin/env clojure
; src/clojure/dnsresolvd
; =============================================================================
; DNS Resolver Daemon (dnsresolvd). Version 0.1
; =============================================================================
; A daemon that performs DNS lookups for the given hostname
; passed in an HTTP request, with the focus on its implementation
; using various programming languages. (HTTP Kit-boosted impl.)
; =============================================================================
; Copyright (C) 2017-2019 Radislav (Radicchio) Golubtsov
;
; (See the LICENSE file at the top of the source tree.)
;

(ns dnsresolvd
    (:require [dnsresolvh :as AUX])
    (:require  dnsresolvd         )
)

(defn main
    "The daemon entry point."
    [argv]

    (let [ret- (AUX/EXIT-SUCCESS)]

    (let [argc (count argv)]

    (let [daemon-name (str *ns*)]

    (let [port-number-      (if (> argc 0) (nth argv 0)
                                           0)]
    (let [print-banner-opt- (if (> argc 1) (nth argv 1)
                                           (AUX/EMPTY-STRING))]

    (let [print-banner-opt (clojure.string/upper-case print-banner-opt-)]

    (cond
        (= print-banner-opt (AUX/PRINT-BANNER-OPT)) (do

            (AUX/separator-draw (AUX/DMN-DESCRIPTION))

            (println (str
            (AUX/DMN-NAME        ) (AUX/COMMA-SPACE-SEP ) (AUX/DMN-VERSION-S--)
            (AUX/ONE-SPACE-STRING) (AUX/DMN-VERSION     ) (AUX/NEW-LINE       )
            (AUX/DMN-DESCRIPTION )                        (AUX/NEW-LINE       )
            (AUX/DMN-COPYRIGHT-- ) (AUX/ONE-SPACE-STRING) (AUX/DMN-AUTHOR     )
            ))

            (AUX/separator-draw (AUX/DMN-DESCRIPTION))
        )
    )

    ; Opening the system logger.
    (let [log (AUX/EMPTY-STRING)] ; <== Dummy val... for a while.
    ; TODO: Implement opening the system logger.

    ; Checking for args presence.
    (cond
        (= argc 0)
            (let [ret0 (AUX/EXIT-FAILURE)]

            (binding [*out* *err*]
            (println (str daemon-name (AUX/ERR-MUST-BE-ONE-TWO-ARGS-1)
                                 argc (AUX/ERR-MUST-BE-ONE-TWO-ARGS-2)
                                      (AUX/NEW-LINE)))

            (println (str (AUX/MSG-USAGE-TEMPLATE-1) daemon-name
                          (AUX/MSG-USAGE-TEMPLATE-2) (AUX/NEW-LINE)))
            )

            (AUX/cleanups-fixate log)

            (System/exit ret0)
            )
    )

    ; Validating the port number and discarding any rubbish it may contain.
    (let [port-number (try
        (Long. (re-find #"\d+" port-number-))
    (catch
        Exception e 0
    ))]

    ; Checking for port correctness.
    (cond
        (or (< port-number (AUX/MIN-PORT)) (> port-number (AUX/MAX-PORT)))
            (let [ret1 (AUX/EXIT-FAILURE)]

            (binding [*out* *err*]
            (println (str daemon-name (AUX/ERR-PORT-MUST-BE-POSITIVE-INT)
                                      (AUX/NEW-LINE)))

            (println (str (AUX/MSG-USAGE-TEMPLATE-1) daemon-name
                          (AUX/MSG-USAGE-TEMPLATE-2) (AUX/NEW-LINE)))
            )

            (AUX/cleanups-fixate log)

            (System/exit ret1)
            )
    )

    ; Starting up the daemon.
    (startup (list
        port-number
        daemon-name
        log
    )))

    ; Making final cleanups.
    (AUX/cleanups-fixate log)
    ))))))

    (System/exit ret-)
    )
)

;(println *compile-path*)

; --- Adding a custom classpath entry (dir) -----------------------------------
; Var names stand for:
; acl ==> sun.misc.Launcher$AppClassLoader
; fld ==> java.lang.reflect.Field
; ucp ==> sun.misc.URLClassPath
;
;(defmacro LIB-URL [] "file:./lib/")
;
;(let [acl (ClassLoader/getSystemClassLoader)                   ] (println (seq (.getURLs acl)))
;(let [fld (aget (.getDeclaredFields java.net.URLClassLoader) 0)] (println                fld  )
;          (.setAccessible fld true) ; <== Important: suppressing Java language access checking.
;(let [ucp (.get    fld acl)                                    ] (println                ucp  )
;          (.addURL ucp (java.net.URL. (LIB-URL)))                (println (seq (.getURLs acl)))
;)))
; -----------------------------------------------------------------------------

;(println *compile-path*)

(main *command-line-args*)

; vim:set nu et ts=4 sw=4:
