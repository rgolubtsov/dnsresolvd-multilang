#!/usr/bin/env escript
% src/erlang/dnsresolvd
% =============================================================================
% DNS Resolver Daemon (dnsresolvd). Version 0.9.9
% =============================================================================
% A daemon that performs DNS lookups for the given hostname
% passed in an HTTP request, with the focus on its implementation
% using various programming languages. (Cowboy-boosted impl.)
% =============================================================================
% Copyright (C) 2017-2022 Radislav (Radicchio) Golubtsov
%
% (See the LICENSE file at the top of the source tree.)
%

-include("lib/dnsresolvd.h").

%% @doc The daemon entry point.
%%
%% @param Args The list of command-line arguments.
%%
%% @returns The exit code indicating the daemon overall termination status.
main(Args) ->
    Ret_ = ?_EXIT_SUCCESS,

    Argv = list_to_tuple(Args),
    Argc = length(       Args),

    Daemon_name = filename:basename(?FILE),

    Port_number_      = if (Argc > 0) -> element(1, Argv);
                           (true    ) -> 0
                        end,
    Print_banner_opt_ = if (Argc > 1) -> element(2, Argv);
                           (true    ) -> ?_EMPTY_STRING
                        end,

    Print_banner_opt = string:to_upper(Print_banner_opt_),

    if (Print_banner_opt =:= ?_PRINT_BANNER_OPT) ->
        separator_draw(?_DMN_DESCRIPTION),

        io:put_chars(       ?_DMN_NAME         ++ ?_COMMA_SPACE_SEP
    ++ ?_DMN_VERSION_S__ ++ ?_ONE_SPACE_STRING ++ ?_DMN_VERSION ++ ?_NEW_LINE
    ++ ?_DMN_DESCRIPTION                                        ++ ?_NEW_LINE
    ++ ?_DMN_COPYRIGHT__ ++ ?_ONE_SPACE_STRING ++ ?_DMN_AUTHOR  ++ ?_NEW_LINE),

        separator_draw(?_DMN_DESCRIPTION);
       (true                                  ) ->
        false
    end,

    % Opening the system logger.
    syslog:start(), {ok, Log} = syslog:open(Daemon_name, [cons, pid], daemon),

    % Checking for args presence.
    if (Argc =:= 0) ->
        Ret0 = ?_EXIT_FAILURE,

        io:put_chars(standard_error,
                     Daemon_name ++ ?_ERR_MUST_BE_ONE_TWO_ARGS_1
        ++ integer_to_list(Argc) ++ ?_ERR_MUST_BE_ONE_TWO_ARGS_2
                                 ++ ?_NEW_LINE ++ ?_NEW_LINE),

        syslog:log(Log, err,
                     Daemon_name ++ ?_ERR_MUST_BE_ONE_TWO_ARGS_1
        ++ integer_to_list(Argc) ++ ?_ERR_MUST_BE_ONE_TWO_ARGS_2
                                 ++ ?_NEW_LINE),

        io:put_chars(standard_error, ?_MSG_USAGE_TEMPLATE_1 ++ Daemon_name
                                  ++ ?_MSG_USAGE_TEMPLATE_2 ++ ?_NEW_LINE
                                                            ++ ?_NEW_LINE),

        cleanups_fixate(Log),

        halt(Ret0);
       (true     ) ->
        false
    end,

    % Validating the port number and discarding any rubbish it may contain.
    Port_number = try
        list_to_integer(Port_number_)
    catch
        error:badarg -> 0
    end,

    % Checking for port correctness.
    if ((Port_number < ?_MIN_PORT) or (Port_number > ?_MAX_PORT)) ->
        Ret1 = ?_EXIT_FAILURE,

        io:put_chars(standard_error,
                     Daemon_name ++ ?_ERR_PORT_MUST_BE_POSITIVE_INT
                                 ++ ?_NEW_LINE ++ ?_NEW_LINE),

        syslog:log(Log, err,
                     Daemon_name ++ ?_ERR_PORT_MUST_BE_POSITIVE_INT
                                 ++ ?_NEW_LINE),

        io:put_chars(standard_error, ?_MSG_USAGE_TEMPLATE_1 ++ Daemon_name
                                  ++ ?_MSG_USAGE_TEMPLATE_2 ++ ?_NEW_LINE
                                                            ++ ?_NEW_LINE),

        cleanups_fixate(Log),

        halt(Ret1);
       (true                                                    ) ->
        false
    end,

    % Starting up the daemon.
    dnsresolvd:start([], {
        Port_number,
        Daemon_name,
        Log
    }),

    % Making final cleanups.
    cleanups_fixate(Log),

    halt(Ret_).

% Helper function. Draws a horizontal separator banner.
separator_draw(Banner_text) ->
    I = length(Banner_text),

    [io:put_chars("=") || _ <- lists:seq(1, I)], io:nl().

% vim:set nu et ts=4 sw=4:
