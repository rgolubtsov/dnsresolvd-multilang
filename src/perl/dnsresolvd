#!/usr/bin/env perl
# src/perl/script/dnsresolvd
# =============================================================================
# DNS Resolver Daemon (dnsresolvd). Version 0.1
# =============================================================================
# A daemon that performs DNS lookups for the given hostname
# passed in an HTTP request, with the focus on its implementation
# using various programming languages. (Mojolicious-boosted impl.)
# =============================================================================
# Copyright (C) 2017-2019 Radislav (Radicchio) Golubtsov
#
# (See the LICENSE file at the top of the source tree.)
#

use strict;
use warnings;
use utf8;
use v5.10;

use FindBin;

BEGIN { unshift @INC, "$FindBin::Bin/lib" }

use Sys::Syslog;
use Scalar::Util "looks_like_number";
use Try::Tiny;
use Mojolicious::Commands;

use DnsResolvd::ControllerHelper
    "_EXIT_FAILURE",
    "_EXIT_SUCCESS",
    "_EMPTY_STRING",
    "_ONE_SPACE_STRING",
    "_COMMA_SPACE_SEP",
    "_NEW_LINE",
    "_PRINT_BANNER_OPT",
# -----------------------------------------------------------------------------
    "_ERR_PORT_MUST_BE_POSITIVE_INT",
    "_ERR_CANNOT_START_SERVER",
    "_ERR_SRV_UNKNOWN_REASON",
    "_ERR_SRV_PORT_IS_IN_USE",
    "_ERR_ADDR_ALREADY_IN_USE",
# -----------------------------------------------------------------------------
    "_ERR_MUST_BE_ONE_TWO_ARGS_1",
    "_ERR_MUST_BE_ONE_TWO_ARGS_2",
# -----------------------------------------------------------------------------
    "_MSG_USAGE_TEMPLATE_1",
    "_MSG_USAGE_TEMPLATE_2",
# -----------------------------------------------------------------------------
    "_MIN_PORT",
    "_MAX_PORT",
# -----------------------------------------------------------------------------
    "_MSG_SERVER_STARTED_1",
    "_MSG_SERVER_STARTED_2",
# -----------------------------------------------------------------------------
    "_DMN_NAME",
    "_DMN_DESCRIPTION",
    "_DMN_VERSION_S__",
    "_DMN_VERSION",
    "_DMN_COPYRIGHT__",
    "_DMN_AUTHOR";

## Constant: The main daemon class name.
use constant DMN_CLASS_NAME => "DnsResolvd";

# Constants: Server start parameters.
use constant {
    DMN_DAEMON_CMD  => "daemon",
    DMN_LISTEN_OPT  => "-l",
    DMN_OP_MOD_OPT  => "-m",
    DMN_LISTEN_HTTP => "http://*:",
    DMN_OP_MOD_PROD => "production",
};

# Helper function. Makes final buffer cleanups, closes streams, etc.
sub _cleanups_fixate {
    # Closing the system logger.
    closelog();
}

my $ret = _EXIT_SUCCESS;

my $argc        = @ARGV;
my $daemon_name = $0;
my $port_number = $ARGV[0];

my $print_banner_opt = _EMPTY_STRING;

if ($argc > 1) {
    $print_banner_opt = uc($ARGV[1]);
}

# Opening the system logger.
openlog($daemon_name, "pid", Sys::Syslog::LOG_DAEMON);

# Instantiating the controller helper class.
my $aux = DnsResolvd::ControllerHelper->new();

if ($print_banner_opt eq _PRINT_BANNER_OPT) {
    $aux->_separator_draw(_DMN_DESCRIPTION);

    say(_DMN_NAME         . _COMMA_SPACE_SEP  . _DMN_VERSION_S__
      . _ONE_SPACE_STRING . _DMN_VERSION      . _NEW_LINE
      . _DMN_DESCRIPTION                      . _NEW_LINE
      . _DMN_COPYRIGHT__  . _ONE_SPACE_STRING . _DMN_AUTHOR);

    $aux->_separator_draw(_DMN_DESCRIPTION);
}

# Checking for args presence.
if ($argc == 0) {
    $ret = _EXIT_FAILURE;

    say($daemon_name . _ERR_MUST_BE_ONE_TWO_ARGS_1
             . $argc . _ERR_MUST_BE_ONE_TWO_ARGS_2
                     . _NEW_LINE);

    syslog(Sys::Syslog::LOG_ERR,
        $daemon_name . _ERR_MUST_BE_ONE_TWO_ARGS_1
             . $argc . _ERR_MUST_BE_ONE_TWO_ARGS_2
                     . _NEW_LINE);

    say(_MSG_USAGE_TEMPLATE_1 . $daemon_name
      . _MSG_USAGE_TEMPLATE_2 . _NEW_LINE);

    _cleanups_fixate();

    exit($ret);
}

# Validating the port number and discarding any rubbish it may contain.
if (!looks_like_number($port_number)) {
    $port_number = 0;
}

# Checking for port correctness.
if (($port_number < _MIN_PORT) || ($port_number > _MAX_PORT)) {
    $ret = _EXIT_FAILURE;

    say($daemon_name . _ERR_PORT_MUST_BE_POSITIVE_INT
                     . _NEW_LINE);

    syslog(Sys::Syslog::LOG_ERR,
        $daemon_name . _ERR_PORT_MUST_BE_POSITIVE_INT
                     . _NEW_LINE);

    say(_MSG_USAGE_TEMPLATE_1 . $daemon_name
      . _MSG_USAGE_TEMPLATE_2 . _NEW_LINE);

    _cleanups_fixate();

    exit($ret);
}

# Trying to start up the daemon.
try {
    say(_MSG_SERVER_STARTED_1 . $port_number . _NEW_LINE
      . _MSG_SERVER_STARTED_2);

    syslog(Sys::Syslog::LOG_INFO,
        _MSG_SERVER_STARTED_1 . $port_number . _NEW_LINE
      . _MSG_SERVER_STARTED_2);

    Mojolicious::Commands->start_app(DMN_CLASS_NAME, DMN_DAEMON_CMD,
                     DMN_LISTEN_OPT, DMN_LISTEN_HTTP . $port_number,
                     DMN_OP_MOD_OPT, DMN_OP_MOD_PROD);
} catch {
    $ret = _EXIT_FAILURE;

    if ($_ =~ _ERR_ADDR_ALREADY_IN_USE) {
        say($daemon_name . _ERR_CANNOT_START_SERVER
                         . _ERR_SRV_PORT_IS_IN_USE
                         . _NEW_LINE);

        syslog(Sys::Syslog::LOG_ERR,
            $daemon_name . _ERR_CANNOT_START_SERVER
                         . _ERR_SRV_PORT_IS_IN_USE
                         . _NEW_LINE);
    } else {
        say($daemon_name . _ERR_CANNOT_START_SERVER
                         . _ERR_SRV_UNKNOWN_REASON
                         . _NEW_LINE);

        syslog(Sys::Syslog::LOG_ERR,
            $daemon_name . _ERR_CANNOT_START_SERVER
                         . _ERR_SRV_UNKNOWN_REASON
                         . _NEW_LINE);
    }
};

# Making final cleanups.
_cleanups_fixate();

exit($ret);

# vim:set nu et ts=4 sw=4:
