#!/usr/bin/env lfescript
; src/lfe/dnsresolvd
; =============================================================================
; DNS Resolver Daemon (dnsresolvd). Version 0.1
; =============================================================================
; A daemon that performs DNS lookups for the given hostname
; passed in an HTTP request, with the focus on its implementation
; using various programming languages. (Cowboy-boosted impl.)
; =============================================================================
; Copyright (C) 2017-2018 Radislav (Radicchio) Golubtsov
;
; (See the LICENSE file at the top of the source tree.)
;

#|
 | @param args The list of command-line arguments.
 |
 | @returns The exit code indicating the daemon overall execution status.
 |#
(defun main (args)
    "The daemon entry point."

    (let ((ret- (: AUX EXIT-SUCCESS)))

    (let ((argv (list_to_tuple args)))
    (let ((argc (length        args)))

    ; --- Error: ./dnsresolvd:XX: function #(FILE 0) undefined ----------------
    ; (let ((daemon-name (: filename basename (FILE))))
    ; -------------------------------------------------------------------------
    (let ((daemon-name (: filename basename (MODULE))))

    (let ((port-number-      (if (> argc 0) (element 1 argv)
                                            0)))
    (let ((print-banner-opt- (if (> argc 1) (element 2 argv)
                                            (: AUX EMPTY-STRING))))

    (let ((print-banner-opt (: string to_upper print-banner-opt-)))

    (cond
        ((=:= print-banner-opt (: AUX PRINT-BANNER-OPT))
            (: AUX separator-draw (: AUX DMN-DESCRIPTION))

            (: io put_chars (++
      (: AUX DMN-NAME        ) (: AUX COMMA-SPACE-SEP ) (: AUX DMN-VERSION-S--)
      (: AUX ONE-SPACE-STRING) (: AUX DMN-VERSION     ) (: AUX NEW-LINE       )
      (: AUX DMN-DESCRIPTION )                          (: AUX NEW-LINE       )
      (: AUX DMN-COPYRIGHT-- ) (: AUX ONE-SPACE-STRING) (: AUX DMN-AUTHOR     )
            (: AUX NEW-LINE)))

            (: AUX separator-draw (: AUX DMN-DESCRIPTION))
        )
    ))))

    ; Checking for args presence.
    (cond
        ((=:= argc 0)
            (let ((ret0 (: AUX EXIT-FAILURE)))

            (: io put_chars 'standard_error
                         (++ daemon-name (: AUX ERR-MUST-BE-ONE-TWO-ARGS-1)
                  (integer_to_list argc) (: AUX ERR-MUST-BE-ONE-TWO-ARGS-2)
                                         (: AUX NEW-LINE) (: AUX NEW-LINE)))

            (: io put_chars 'standard_error
                         (++ (: AUX MSG-USAGE-TEMPLATE-1) daemon-name
                             (: AUX MSG-USAGE-TEMPLATE-2) (: AUX NEW-LINE)
                                                          (: AUX NEW-LINE)))

            (: AUX cleanups-fixate ())

            (halt ret0)
            )
        )
    ))))

    ; Making final cleanups.
    (: AUX cleanups-fixate ())

    (halt ret-)
    )
)

; vim:set nu et ts=4 sw=4:
